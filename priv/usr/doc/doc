On 03.02.2019 22:39, Валентин Юрин wrote:
> 31.01.2019 11:08, Михаил Данилин пишет:
>
>> Давайте сделаем так.   У нас есть  типа "неделя".
>>
>> Игорь выносит доступ к своему работающему макету,
>>
>> и знакомит тебя с ним, отвечая на вопросы и давая тебе комментарии (по почте ??).
>>
>> Ты - осваиваешь(ся), и готовишь бриф (буквально пару листочков!)
>>
>> - назначение
>> - основные задачи и функции
>> - принципы положенные в основу решения
>> - интерфейс с пользователем
>> ....
>> ....
>
> Пара листочков не получается... многа букафф... как я это пока понимаю...
>
> Игорь, я правильно понял, что управление клиентами теперь идёт через WebSocket-ы и не использует MQTT? Добавь/убавь что нужно пж...
>
>
>
> --
> Валентин Юрин
> Служба документации и технической поддержки
> Network Systems Group
> http://www.nsg.ru
>
> kleschtsch.txt
> КЛЕЩ - новое поколение систем бесперебойной доставки данных
>
> 0. Общая характеристика
>
> Система КЛЕЩ является развитием технологий NSG для бесперебойного подключения клиентских устройств к центральному ресурсу (например, банкоматов к процессинговому центру). КЛЕЩ разработан с учетом 10-летнего опыта:
> * эксплуатации системы NSG uiTCP
> * внедрения её в крупномасштабных инсталляциях (сотни-тысячи клиентов)
> * реализации автоматического конфигурирования и централизованного мониторинга в таких системах
> * а также изменившихся требований и технологий, используемых при построении сетей.
>
> 1. Состав и принципы построения системы
>
> Система КЛЕЩ представляет собой интегрированное решение, состоящее из 3 основных компонент, независимых друг от друга:
> * подсистемы туннелей (КЛЕЩ-Т)
> * подсистемы автоматического конфигурирования клиентов (КЛЕЩ-К)
> * подсистемы мониторинга клиентов (КЛЕЩ-М)
> а также Web-сервера для управления всей системой.
> Названия подсистем в данное время являются условными и могут быть изменены к моменту выпуска первой коммерческой версии.
>
> Все 3 подсистемы являются изолированными приложениями и могут быть использованы как вместе, так и по отдельности. В частности, туннели КЛЕЩ-Т могут настраиваться вручную, а мониторинг осуществляться сторонними приложениями. Или, наоборот, вместо КЛЕЩ-Т могут использоваться стандартные типы туннелей (IPsec, ОpenVPN, STunnel) или унаследованные фирменные NSG uiTCP, работающие под управлением КЛЕЩ-К и/или КЛЕЩ-М. В составе системы также могут использоваться центральные шлюзы VPN сторонних производителей, если они не требуют индивидуальной настройки для каждого клиента (Cisco DM-VPN, OpenVPN в режиме tcp-server).
>
> Ядром системы являются один или несколько (как правило, несколько - для резервирования) серверов, на каждом из которых могут исполняться одна, две или все три основные компоненты. При этом все сервера используют
> * единую базу данных о клиентах, их настройках и командах, переданных на исполнение
> * единую базу телеметрической информации.
> Синхронизация баз между серверами производится автоматически.
Точнее все сервера работают с одной БД, а ее отказоустойчивость - это задача СУБД(Там много способов. Потоковая, каскадная, синхронная репликации итп.)
>
>
> С технической точки зрения, все подсистемы представляют собой приложения на языке elixir. Благодаря этому вся система изначально является многозадачной, многоядерной, со встроенной системой управления процессами (OTP), со встроенным HTTP-сервером и фреймворком для создания динамических WEB приложений (Phoenix), с модулем для работы со сторонними базами данных, и др. Язык elixir является распределенным, т.е. встроенные в него средства обеспечивают взаимодействие между несколькими инсталляциями серверов без применения дополнительных надстроек.
>
> Приложения - и серверные, и клиентские - работают в виртуальных контейнерах Docker и могут устанавливаться как на маршрутизаторы NSG под управлением NSG Linux, так и на любые сторонние системы Linux (технологические контроллеры, ПК, киоски, рекламно-информационные табло и др.). В контейнере может быть собрано 1, 2 или все 3 приложения, в зависимости от требований заказчика. Контейнеры с приложениями являются самостоятельным коммерческим продуктом NSG.
>
> 2. Компоненты системы
>
> 2.1. Подсистема туннелей
>
> Подсистема туннелей КЛЕЩ-Т обеспечивает бесперебойные соединения между клиентскими маршрутизаторами и центральными шлюзами с использованием любых доступных каналов передачи данных. КЛЕЩ выборочно наследует лучшие стороны системы NSG uiTCP, отсекая невостребованное и излишнее, добавляя новые актуальные возможности и современные принципы взаимодействия с пользователем.
>
> Основные принципы построения КЛЕЩ-Т:
> * Используются TCP-соединения между клиентом и сервером. Соединения инициируются клиентом, и на него же возлагается мониторинг работы физических каналов связи. Клиенты могут иметь любые IP-адреса, в т.ч. динамические и приватные (скрытые за NAT поставщика услуг). Сервера имеют статические IP-адреса, доступные извне. Один и тот же сервер может иметь разные адреса при подключении через разные каналы связи и разных операторов (как и в uiTCP).
мониторинг работы  каналов связи возможен и со стороны сервера - внутренные пинги(Но это можно не писать)
>
> * Клиент поддерживает включёнными и контролирует одновременно все каналы связи: как используемые для передачи данных в текущий момент, так и (в отличие от uiTCP) неиспользуемые. Контроль осуществляется стандартными пакетами TCP keepalive. (Вместо uiTCP keepalive в активных каналах и сторонних механизмов - LCP Echo, netping - в неактивных.)
> * Физические каналы могут быть любой природы - как проводные, так и беспроводные. Применительно к современной практике - сотовые 1-симчатые, 2-симчатые с попеременным выбором SIM-карт, WiFi, Ethernet. Число каналов связи может быть любым от 1 (что также имеет смысл) и более.
> * Каналы могут использоваться согласно различным дисциплинам: горячее резервирование в порядке приоритета или по кругу, агрегирование, дублирование и др. (В uiTCP основная дисциплина - резервирование, другие дисциплины не предусмотрены или реализованы не оптимальным образом.)
> * С точки зрения сетевого стека и приложений, при любой дисциплине туннель выглядит как виртуальное соединение "точка-точка". Назначение IP-адресов, маршрутизация и т.п. производятся обычным образом и не связаны с внутренними механизмами туннеля. Трудоёмкие в настройке и неактуальные режимы туннеля (изначально присутствующие в uiTCP) исключены.
> * По всем используемым каналам устанавливаются TCP-соединения к одному из серверов КЛЕЩ-Т.
Сразу ко всем серверам. Если n физических каналов и m серверов, то будет n x m соединений, может меньше, если к какому-то серверу нельзя  подключиться по всем каналам.
>  При потере связи по одному из каналов работа других продолжается согласно установленной дисциплине. В случае потери связи по всем каналам производится попытка восстановления связи с этим же сервером,
Каждое соединение(определяемое парой {физ. канал, сервер}) независимо от других будет постоянно пытаться восстанавливаться
>  при этом туннель считается действующим,  передаваемые данные буферизуются и сохраняются на обеих сторонах туннеля. При успешном восстановлении связи передача данных возобновляется с текущей позиции, без потерь.
Сейчас это не так. Буферизации нет. Целостность данных возлагается на вышестоящие уровни. Мы предоставляем сетевой интерфейс, а он имеет право терять/дублировать данные. Хотя реальные потери начнутся только при падении всех n x m соединений,
>  При невозможности восстановления связи за заданные таймауты и число попыток (например, выключении или аварии сервера) - туннель разрывается, не переданные данные теряются, клиент инициирует установление нового туннеля к этому же или другому серверу, по кругу или (рекомендуется при >2 серверах) случайным образом. В этом случае (в отличие от uiTCP в режиме TCP-прокси) приложения на клиентской и серверной стороне должны самостоятельно установить факт потери и возобновления связи и при необходимости инициировать новую прикладную сессию.

Туннель сам не разрывается никогда, в смысле что сетевой интерфейс созданный при старте клеща существует до падения самого клеща(чего быть не должно). При падении всех n x m соединений можно переводить его в состояние DOWN чтобы прикладная часть знала, а может и не надо, ведь например eth никогда не падает.

Если сетевой интерфейс рушится по внешним причинам, например его зачем-то удаляет ядро, то клещ это видит и уже здесь рестартует все с нуля.
>
> * Код на языке elixir обеспечивает высокую производительность и эффективное использование современных многоядерных процессоров (по сравнению с uiTCP), особенно при стрессовых нагрузках (напр. массовый переход клиентов на резервный сервер) или большом трафике (передача мультимедиа и т.п.).
Для информации. Пробовал на своей рабочей машинке одномоментный рестарт 4096 туннелей по 2 ssl соединения в каждом(8192), то есть 4096+8192 сокета: полет нормальный, устанавливается за пару минут. 8192 туннеля уже начинает свопить и циклиться.
>
> * Туннель настраивается как единая сущность, которая включает в себя настройку как клиентской, так и серверной стороны одновременно. Для настройки используется Web-интерфейс, типовые шаблоны конфигурации и набор уникальных параметров клиента. (В отличие от громоздкой ручной конфигурации в uiTCP.)
> * В случае достижения предельной физической производительности одного сервера, дальнейшее наращивание системы возможно за счёт увеличения числа серверов в системе, с резервированием по принципу N+1. Синхронизация настроек серверов производится автоматически. Таким образом, максимальное число клиентов в системе практически не ограничено.
> * Для защиты данных в туннеле используется TLSv1.2 или выше.
>
> 2.2. Подсистема конфигурации
>
> Подсистема автоматической конфигурации КЛЕЩ-К выполняет:
> * Создание конфигурации клиента и конфигурации серверной стороны туннеля (КЛЕЩ-Т, uiTCP или любого из стандартных типов VPN) на основе заданных шаблонов и уникальных параметров для данного клиента.
> * Загрузку серверной части конфигурации на VPN-шлюзы (если это устройства NSG).

Ну если не NSG то тоже можно. Если сервер линуксовый, то выполнение bash скпипта(уже отработано), если циска, то добавить плагин, который выполнит удаленно цисковскую команду.


>
> * Первоначальную загрузку конфигурации на клиента по HTTPS.
Первоначальную можно сразу через клещ
>
> * Повторную загрузку конфигурации на клиента по туннелю (КЛЕЩ-Т или иному) при необходимости.
> * Управление клиентом путём передачи ему заданных команд (скриптов) и контроля за их выполнением.
>
> Для создания конфигурации используются шаблоны и уникальные параметры клиента. Шаблоны строятся вручную на начальном этапе построения системы. За основу берётся отлаженная опытная конфигурация, в которой все уникальные параметры клиента заменяются на макроподстановки. Значения для этих макроподстановок вводятся на серверной стороне при создании клиента в системе. Они могут включать параметры:
> * вычисляемые автоматически из серийного номера по заданным правилам (напр. IP-адрес в приватной сети и подсеть для ЛС за клиентом)

+ присланные в запросе, кроме обязательного идентификатора(сейчас у нас это DEV_SN) клиент может прислать любое количество параметров

+ вычисляемые прямо в шаблоне из присланных параметров(в том числе идентификатора)
>
> * априори неизвестные и вводимые вручную (напр. системное имя = имя банкомата, адрес установки)
> * выбираемые из заданного списка (напр. принудительный выбор режима работы сотового модуля)
>
> Клиенты могут регистрироваться в системе
> * заранее, вручную, до их включения
> * по факту их включения и обнаружения
> * заранее, путём считывания QR-кода
> Созданные клиенты могут редактироваться и удаляться из системы
>
> Для конфигурирования клиенты могут разбиваться на группы в зависимости от модели устройства, набора каналов связи, географического расположения, административного подчинения, важности и т.п. Для разных групп могут использоваться разные шаблоны.

Группы  это скорее для мониторинга и ограничений для админов. Каждый клиент может принадлежать нескольким группам(0 и более), для каждого админа будут доступны несколько групп с которыми он имеет право работать.

Группа в смысле автоконфигурирования будет наверно называться Классом(Ничего лучшего не придумывается, Было вообще Скрипт, но пока переделал в Класс). Каждый клиент принадлежит не более чем одному классу. В Классе определяются макросы, значения для тестирования, префикс а также ссылки на шаблоны для создания конфигурации клиента, сервера, скрипта запроса инвентарных данных, скрипта запроса оперативных данных и может еще чего.

Класс и шаблоны опишу попозже, хочу сегодня еще довести их до приличного вида
>
>
> Клиентские устройства поставляются с заводской конфигурацией, специализированной для данного заказчика. Конфигурация обеспечивает подключение к сетям связи (как правило, сотовым) без настроек, загрузку рабочей конфигурации с любого сервера из заданного списка и её применение. При запросе передаётся идентификатор клиента (модель и заводской номер), по которому сервер выбирает индивидуальную конфигурацию для него. При использовании туннелей КЛЕЩ-Т они могут быть заранее настроены в заводской конфигурации, поскольку могут обращаться к серверу автоконфигурации, не имея уникальных настроек клиента; при использовании других типов туннелей первоначальная загрузка может производиться по HTTPS.
>
> Конфигурация представляет собой самораспакующийся архив. Он содержит в себе собственно файл(ы) конфигурации и скрипты для их установки и перезагрузки устройства (или применения конфигурации иным способом).
>
> Конфигурация может быть создана как для устройств NSG, так и для продуктов иных производителей. В последнем случае заводская конфигурация устройства должна содержать, в качестве клиента автоконфигурации, скрипт, который выполнит следующие действия:
> * считает серийный номер клиента (или некоторый иной уникальный идентификатор, предпочтительно цифровой - напр. серийный номер материнской платы ПК)
> * подставит этот номер в запрос HTTPS и загрузит конфигурацию с помощью утилит wget или curl
> * запустит полученный самораспакующийся архив на исполнение
> При этом вся специфика конкретного продукта (синтаксис файлов конфигурации, их имена и пути, команды для применения конфигурации) содержится в шаблоне на сервере и в полученном архиве. Таким образом, КЛЕЩ-К является универсальной платформой для массового конфигурирования любых Linux-устройств любых производителей.
>
> Клиент NSG может быть возвращён к заводской конфигурации (и после этого перезапросит рабочую конфигурацию) локально, нажатием кнопки Service. При этом светодиодная индикация показывает текущее состояние устройства (заводская конфигурация, рабочая конфигурация, готовность к возврату в заводскую конфигурацию и т.п.). Таким образом, физическая установка и переустановка устройства может выполняться низкоквалифицированным техником, не имеющим ноутбука или другого специального оборудования.
>
> Типовой набор команд, предусмотренных для клиента, может включать:
> * повторный запрос конфигурации по работающему туннелю
> * загрузку и обновление ПО клиента (в т.ч. по туннелю с текущего сервера)
> * рестарт клиента
> * рестарт заданных портов (актуально для сотовых) на клиенте
> а также любые другие команды, которые администратор системы сочтёт необходимыми.
>
> 2.3. Подсистема мониторинга (в разработке)
>
> Подсистема мониторинга КЛЕЩ-М будет выполнять следующие функции:
> * генерацию телеметрических данных на клиентских устройствах
> * трансляцию телеметрии на сервер(а) мониторинга
> * генерацию дополнительных данных о состоянии клиентов на туннельных серверах (up/down/suspended) или непосредственно на серверах мониторинга (доступен/недоступен)
> * подсчёт сводной статистики по всей системе (суммарное число клиентов в каждом состоянии, процент доступности, распределение по серверам, операторам и т.п.)
> * экспорт данных во внешние БД и системы мониторинга (конкретно, Zabbix)
> * управление внешними системами мониторинга (автоматическое создание клиентских хостов в Zabbix, и т.п.)
>
> Телеметрические данные, генерируемые на клиентских устройствах, могут включать:
> * состояние и статистику работы всех портов
> * уровни сигнала сотовых сетей
> * названия текущих операторов (актуально для 2-симчатых сотовых портов)
> * результаты тестов SLA, выполняемых со стороны клиента
> * любые другие программные события в системе
> * любые аппаратные события (напр. вскрытие банкомата, аппаратного шкафа, отключение питания) при наличии соответствующих аппаратных датчиков и аксессуаров ("сухие контакты", аккумулятор и т.п.)
> * инвентаризационные данные устройства и его аппаратных и программных компонент (версия мат.платы, версия ПО, типы сотовых модулей, версии их прошивок, IMSI SIM-карт и т.п.)
>
> Для генерации и трансляции телеметрии на клиентских устройствах должен работать агент мониторинга. Реализация агента, с более или менее полным набором доступной информации, находится в компетенции производителя оборудования.
Либо в простейшем случае клиент должен уметь выполнить принятый скрипт и вернуть результат stdout(клиентская часть клеща)
>
>
> Для передачи телеметрии в ядро системы наиболее целесообразно использовать протокол MQTT с форматом посылок JSON. Брокер MQTT может входить в состав серверов КЛЕЩ-М, либо использоваться сторонний. На клиентах необходим публикатор сообщений MQTT. (Возможны и другие способы передачи, но по существу MQTT и есть механизм, специально разработанный для данной цели. Попытки заменить его чем-либо "более простым" приведут к необходимости дальнейшей доработки этого "простого механизма" с учётом многих возможных ситуаций и, в конечном счёте, к повторению MQTT.)
>
> Данные передаются внутри туннелей любого используемого типа (КЛЕЩ-Т или иного). При этом сервера КЛЕЩ-М могут быть совмещены с туннельными серверами (шлюзами VPN) и серверами автоконфигурации КЛЕЩ-К, а могут исполняться на отдельных хостах.
>
>
> 2.4. Web-интерфейс
>
> Web-интерфейс системы предназначен для полного управления всеми компонентами системы и, таким образом, освобождает администратора от повседневной работы в командном интерфейсе каждого устройства в отдельности. В зависимости от установленных основных компонент, он обеспечивает централизованную конфигурацию, мониторинг и управление клиентами, а именно:
>
> * Создание групп клиентов и шаблонов конфигурации для них
> * Регистрацию клиентов в системе (в т.ч. с автоматическим обнаружением и с использованием QR-кода), ввод и редактирование их индивидуальных параметров, удаление клиентов
> * Создание типовых команд для управления клиентами
>
> * Визуальный мониторинг сводной информации по системе
> * Визуальный мониторинг основных показателей работы клиентов в табличной форме
> * Детальный визуальный мониторинг отдельного выбранного клиента
> * Классификацию и индикацию аварийных событий
> * Исполнение команд (из сформированного ранее набора) для индивидуальных клиентов или для групп целиком, визуальный контроль результатов
>
> * Непосредственный доступ на устройства (серверы и клиенты) с NSG Linux 2.x и иные, управляемые через Web-интерфейс. Для устройств, в которых предусмотрено управление только через CLI, может быть использована ограниченная реализация эмулятора терминала в виде приложения в Web-броузере.
>
> * Создание пользователей с заданными правами доступа в части конфигурирования, мониторинга и управления клиентами.
> * Настройку экспорта во внешние БД и системы мониторинга
> * Настройку оповещений об аварийных событиях (SMS, e-mail, запись в отдельные журналы)
